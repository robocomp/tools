from robogen.artifact import ImportManager
from schema import Schema, Optional
import robogen

ROBOCOMP_COMM_ITEM = Schema({
    'name': str,
    Optional('type', default='ice'): str,
})

class AgentArtifact(robogen.Artifact):
    extensions = {
        'root':           {},
        'communications': {},
    }

    @classmethod
    def schema(klass):
        return Schema({
            'name':     str,
            'language': str,
            Optional('imports',        default=[]):    [str],
            Optional('apis',           default=[]):    [str],
            Optional('qtdebug',        default=False): bool,
            Optional('ignore_attrs',   default=[]):    [str],
            Optional('communications', default=[]):    {
                Optional('robocomp'): {
                    Optional('requires',      default=[]): [ROBOCOMP_COMM_ITEM],
                    Optional('implements',    default=[]): [ROBOCOMP_COMM_ITEM],
                    Optional('publishes',     default=[]): [ROBOCOMP_COMM_ITEM],
                    Optional('subscribes_to', default=[]): [ROBOCOMP_COMM_ITEM],
                },

                # Install alternative communication types
                **klass.extensions['communications'],
            },
            Optional('subscriptions', default=[]):  {
                # NOTE: some syntax sugar would make this section much more
                # readable for the agent designer (see ADSL).
                Optional('nodes', default=[]): [str],
                Optional('edges', default=[]): [str],
            },

            # Install root extensions
            **klass.extensions['root'],
        })

    @classmethod
    def extend_schema(klass, anchor, key, frag):
        klass.extensions[anchor][key] = frag

    def __init__(self, raw, importer):
        super().__init__(raw, importer)

        # Grab tree generated by the superclass constructor and delete it from
        # the artifact.
        tree = self.tree
        # TODO: uncomment line below
        # del self.tree

        # Dumb copy, but better be explicit. Cleverness is not future-proof.
        self.name           = tree['name']
        self.language       = tree['language']
        self.imports        = importer.import_files(tree['imports'])
        self.qtdebug        = tree['qtdebug']
        self.ignore_attrs   = tree['ignore_attrs']
        self.communications = tree['communications'] # TODO
        # TODO: hack but I don't have time for PyParsing shenanigans
        self.sub_nodes      = tree['subscriptions']['nodes'] if tree['subscriptions'] else {}
        self.sub_edges      = tree['subscriptions']['edges'] if tree['subscriptions'] else {}

    @property
    def ice_interfaces(self):
        robocomp_comms = self.communications['robocomp']

        candidates = [
            *robocomp_comms['requires'],
            *robocomp_comms['implements'],
            *robocomp_comms['publishes'],
            *robocomp_comms['subscribes_to'],
        ]

        return {
            candidate['name']
            for candidate in candidates
            if candidate['type'] == 'ice'
        }
