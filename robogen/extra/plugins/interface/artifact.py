from schema import Schema, Optional
import robogen

class InterfaceArtifact(robogen.Artifact):
    SCHEMA = Schema({
        'name': str,
        Optional('imports', default=[]): [str],
        Optional('sequences', default={}): {
            Optional(str): {
                'type': str,
            },
        },
        Optional('dictionaries', default={}): {
            Optional(str): {
                'from': str,
                'to':   str,
            },
        },
        Optional('enums', default={}): {
            Optional(str): [str],
        },
        Optional('exceptions', default={}): {
            Optional(str): [{
                'name': str,
                'type': str,
            }],
        },
        Optional('interfaces', default={}): {
            Optional(str): {
                Optional(str): {
                    Optional('return_type', default='void'): str,
                    Optional('is_idempotent', default=False): bool,
                    Optional('params', default=[]): [{
                        'name': str,
                        'type': str,
                        Optional('is_output', default=False): bool,
                    }],
                    Optional('throws', default=[]): [str]
                }
            },
        },
        Optional('structs', default={}): {
            Optional(str): [{
                'name': str,
                'type': str,
                Optional('default_value'): str,
            }],
        },
    })

    def __init__(self, raw, importer):
        super().__init__(raw, importer)

        # Grab tree generated by the superclass constructor and delete it from
        # the artifact.
        tree = self.tree
        # TODO: uncomment line below
        # del self.tree

        # Dumb copy, but better be explicit. Cleverness is not future-proof.
        self.name         = tree['name']
        self.imports      = importer.import_files(tree['imports'])
        self.sequences    = tree['sequences']
        self.dictionaries = tree['dictionaries']
        self.enums        = tree['enums']
        self.exceptions   = tree['exceptions']
        self.interfaces   = tree['interfaces']
        self.structs      = tree['structs']
